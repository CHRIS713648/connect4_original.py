from tkinter import Tk, Canvas, messagebox, Label
import numpy as np
import random
import sys
import math
import connect4 
BLUE = (0,0,255)
BLACK = (0,0,0)
RED = (255,0,0)
YELLOW = (255,255,0)

ROW_COUNT = 6
COLUMN_COUNT = 7

PLAYER = 0
AI = 1

EMPTY = 0
PLAYER_PIECE = 1
AI_PIECE = 2

WINDOW_LENGTH = 4

def create_board():
	board = np.zeros((6,7))
	return board

def drop_piece(board, row, col, piece):
	board[row][col] = piece

def is_valid_location(board, col):
	return board[ROW_COUNT-1][col] == 0

def get_next_open_row(board, col):
	for r in range(ROW_COUNT):
		if board[r][col] == 0:
			return r

def print_board(board):
	print(np.flip(board, 0))

def winning_move(board, piece):
	# Check horizontal locations for win
	for c in range(COLUMN_COUNT-3):
		for r in range(ROW_COUNT):
			if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
				return True

	# Check vertical locations for win
	for c in range(COLUMN_COUNT):
		for r in range(ROW_COUNT-3):
			if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
				return True

	# Check positively sloped diaganols
	for c in range(COLUMN_COUNT-3):
		for r in range(ROW_COUNT-3):
			if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
				return True

	# Check negatively sloped diaganols
	for c in range(COLUMN_COUNT-3):
		for r in range(3, ROW_COUNT):
			if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
				return True

def evaluate_window(window, piece):
	score = 0
	opp_piece = PLAYER_PIECE
	if piece == PLAYER_PIECE:
		opp_piece = AI_PIECE

	if window.count(piece) == 4:
		score += 100
	elif window.count(piece) == 3 and window.count(EMPTY) == 1:
		score += 5
	elif window.count(piece) == 2 and window.count(EMPTY) == 2:
		score += 2

	if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:
		score -= 4

	return score

def score_position(board, piece):
	score = 0

	## Score center column
	center_array = [int(i) for i in list(board[:, COLUMN_COUNT//2])]
	center_count = center_array.count(piece)
	score += center_count * 3

	## Score Horizontal
	for r in range(ROW_COUNT):
		row_array = [int(i) for i in list(board[r,:])]
		for c in range(COLUMN_COUNT-3):
			window = row_array[c:c+WINDOW_LENGTH]
			score += evaluate_window(window, piece)

	## Score Vertical
	for c in range(COLUMN_COUNT):
		col_array = [int(i) for i in list(board[:,c])]
		for r in range(ROW_COUNT-3):
			window = col_array[r:r+WINDOW_LENGTH]
			score += evaluate_window(window, piece)

	## Score posiive sloped diagonal
	for r in range(ROW_COUNT-3):
		for c in range(COLUMN_COUNT-3):
			window = [board[r+i][c+i] for i in range(WINDOW_LENGTH)]
			score += evaluate_window(window, piece)

	for r in range(ROW_COUNT-3):
		for c in range(COLUMN_COUNT-3):
			window = [board[r+3-i][c+i] for i in range(WINDOW_LENGTH)]
			score += evaluate_window(window, piece)

	return score

def is_terminal_node(board):
	return winning_move(board, PLAYER_PIECE) or winning_move(board, AI_PIECE) or len(get_valid_locations(board)) == 0

def minimax(board, depth, alpha, beta, maximizingPlayer):
	valid_locations = get_valid_locations(board)
	is_terminal = is_terminal_node(board)
	if depth == 0 or is_terminal:
		if is_terminal:
			if winning_move(board, AI_PIECE):
				return (None, 100000000000000)
			elif winning_move(board, PLAYER_PIECE):
				return (None, -10000000000000)
			else: # Game is over, no more valid moves
				return (None, 0)
		else: # Depth is zero
			return (None, score_position(board, AI_PIECE))
	if maximizingPlayer:
		value = -math.inf
		column = random.choice(valid_locations)
		for col in valid_locations:
			row = get_next_open_row(board, col)
			b_copy = board.copy()
			drop_piece(b_copy, row, col, AI_PIECE)
			new_score = minimax(b_copy, depth-1, alpha, beta, False)[1]
			if new_score > value:
				value = new_score
				column = col
			alpha = max(alpha, value)
			if alpha >= beta:
				break
		return column, value

	else: # Minimizing player
		value = math.inf
		column = random.choice(valid_locations)
		for col in valid_locations:
			row = get_next_open_row(board, col)
			b_copy = board.copy()
			drop_piece(b_copy, row, col, PLAYER_PIECE)
			new_score = minimax(b_copy, depth-1, alpha, beta, True)[1]
			if new_score < value:
				value = new_score
				column = col
			beta = min(beta, value)
			if alpha >= beta:
				break
		return column, value

def get_valid_locations(board):
	valid_locations = []
	for col in range(COLUMN_COUNT):
		if is_valid_location(board, col):
			valid_locations.append(col)
	return valid_locations

def pick_best_move(board, piece):

	valid_locations = get_valid_locations(board)
	best_score = -10000
	best_col = random.choice(valid_locations)
	for col in valid_locations:
		row = get_next_open_row(board, col)
		temp_board = board.copy()
		drop_piece(temp_board, row, col, piece)
		score = score_position(temp_board, piece)
		if score > best_score:
			best_score = score
			best_col = col

	return best_col

def draw_board(board):
	for c in range(COLUMN_COUNT):
		for r in range(ROW_COUNT):
			connect4.draw.rect(screen, BLUE, (c*SQUARESIZE, r*SQUARESIZE+SQUARESIZE, SQUARESIZE, SQUARESIZE))
			connect4.draw.circle(screen, BLACK, (int(c*SQUARESIZE+SQUARESIZE/2), int(r*SQUARESIZE+SQUARESIZE+SQUARESIZE/2)), RADIUS)
	
	for c in range(COLUMN_COUNT):
		for r in range(ROW_COUNT):		
			if board[r][c] == PLAYER_PIECE:
				connect4.draw.circle(screen, RED, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
			elif board[r][c] == AI_PIECE: 
				connect4.draw.circle(screen, YELLOW, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
	connect4.display.update()

board = create_board()
print_board(board)
game_over = False

connect4.init()

SQUARESIZE = 100

width = COLUMN_COUNT * SQUARESIZE
height = (ROW_COUNT+1) * SQUARESIZE

size = (width, height)

RADIUS = int(SQUARESIZE/2 - 5)

screen = connect4.display.set_mode(size)
draw_board(board)
connect4.display.update()

myfont = connect4.font.SysFont("monospace", 75)

turn = random.randint(PLAYER, AI)

while not game_over:

	for event in connect4.event.get():
		if event.type == connect4.QUIT:
			sys.exit()

		if event.type == connect4.MOUSEMOTION:
			connect4.draw.rect(screen, BLACK, (0,0, width, SQUARESIZE))
			posx = event.pos[0]
			if turn == PLAYER:
				connect4.draw.circle(screen, RED, (posx, int(SQUARESIZE/2)), RADIUS)

		connect4.display.update()

		if event.type == connect4.MOUSEBUTTONDOWN:
			connect4.draw.rect(screen, BLACK, (0,0, width, SQUARESIZE))
			#print(event.pos)
			# Ask for Player 1 Input
			if turn == PLAYER:
				posx = event.pos[0]
				col = int(math.floor(posx/SQUARESIZE))

				if is_valid_location(board, col):
					row = get_next_open_row(board, col)
					drop_piece(board, row, col, PLAYER_PIECE)

					if winning_move(board, PLAYER_PIECE):
						label = myfont.render("Player 1 wins!!", 1, RED)
						screen.blit(label, (40,10))
						game_over = True

					turn += 1
					turn = turn % 2

					print_board(board)
					draw_board(board)


	# # Ask for Player 2 Input
	if turn == AI and not game_over:				

		#col = random.randint(0, COLUMN_COUNT-1)
		#col = pick_best_move(board, AI_PIECE)
		col, minimax_score = minimax(board, 5, -math.inf, math.inf, True)

		if is_valid_location(board, col):
			#pygame.time.wait(500)
			row = get_next_open_row(board, col)
			drop_piece(board, row, col, AI_PIECE)

			if winning_move(board, AI_PIECE):
				label = myfont.render("Player 2 wins!!", 1, YELLOW)
				screen.blit(label, (40,10))
				game_over = True

			print_board(board)
			draw_board(board)

			turn += 1
			turn = turn % 2

	if game_over:
		connect4.time.wait(3000)
class Connect4:
    # number of columns on the board
    column_count = 7
    # number of rows on the board
    row_count = 6
    # left and top offset of the canvas
    left_top_offset = 30    
    # width of each column
    column_width = 50
    # 4 pieces for connect4
    piece_winning_count = 4
    # diameter of each piece
    piece_diameter = 40
    # spacing between pieces
    piece_spacing = column_width - piece_diameter
    # width of canvas
    canvas_width = 400
    # height of canvas
    canvas_height = 350
    # background color of canvas
    canvas_background = "blue"

    # create Player class to hold name, color and type ("human" or "cpu")
    class Player:
        def __init__(self, name, color, type):
            self.name = name
            self.color = color
            self.type = type
            # TO-DO add score attribute?

    # initialize variables
    def __init__(self):
        # create root tkinter object
        self.root = Tk()
        # add title
        self.root.title("Connect4")
        # disable resizing of the window
        self.root.resizable(False, False) 
        # create canvas graphical object that will be used as board
        self.canvas = Canvas(self.root, width = self.canvas_width, height = self.canvas_height, bg = self.canvas_background)
        # create the user interface (buttons, labels, etc.)
        self.create_ui()
        # create new game
        self.new_game(self.Player("Red Player", "red", "human"), self.Player("Yellow Player", "yellow", "human"))           
        # start tkinter mainloop
        self.root.mainloop()

    # create the user interface (buttons, labels, etc.)
    # here we can add a score board, player names' input and more
    def create_ui(self):
        # create canvas click event that captures the mouse click
        self.canvas.bind('<Button-1>', self.canvas_on_click)
        # create canvas motion event that captures the mouse movement
        self.canvas.bind('<Motion>', self.canvas_on_hover)
        self.canvas.pack()
        # create player's turn label
        self.player_current_label = Label(self.root, text = "", font = ('Arial', 14), fg = 'black')        
        self.player_current_label.pack(side='bottom')

    # create a new game
    def new_game(self, player1, player2):
        # clear canvas
        self.canvas.delete('all')
        # draw game board on canvas
        self.draw_board()
        # create player1 object
        self.player1 = player1
        # create player2 object
        self.player2 = player2
        # set first player as player1
        self.player_current = self.player1
        # update current player's label
        self.player_current_label.config(text = f"Current Player: {self.player_current.name}")
        # initialize selected column
        self.column_selected = 0 

    # draw a connect4 for board, 6 row by 7 columns
    def draw_board(self):
        # create a nested list of 2 dimensions to hold the board of the game
        # this is where the data of each piece will be saved
        self.board = [[' ' for j in range(self.column_count)] for i in range(self.row_count)]
        # generate 6x7 white circles on the canvas background to create a connect4 game board
        for i in range(self.row_count):
            for j in range(self.column_count):
                x1 = j * self.column_width + self.left_top_offset
                y1 = i * self.column_width + self.left_top_offset
                x2 = x1 + self.piece_diameter
                y2 = y1 + self.piece_diameter
                self.canvas.create_oval(x1, y1, x2, y2, fill='white')

    # mouse motion event handler
    def canvas_on_hover(self, event):      
        # capture mouse X coordinate and get the column that coresponds to this X
        new_column_selected = self.get_column_selected(event.x)
        # check if mouse is over new column
        if new_column_selected != self.column_selected:
            #print("column: " + str(self.get_current_column(event.x)))
            # check if column_selected_effect exists
            if hasattr(self, "column_selected_effect"):
                # delete previous column_selected_effect rectangle
                self.canvas.delete(self.column_selected_effect)
            # updated selected column
            self.column_selected = new_column_selected
            # generate selection effect rectangle x1, x2, y1, y2
            x1 = self.column_selected * self.column_width + self.left_top_offset - self.piece_spacing/2
            y1 = self.left_top_offset - self.piece_spacing/2
            x2 = x1 + self.piece_diameter + self.piece_spacing
            y2 = self.left_top_offset + self.row_count * self.piece_diameter + (self.row_count - 1) * self.piece_spacing + self.piece_spacing/2
            # create new column_selected_effect rectangle
            self.column_selected_effect = self.canvas.create_rectangle(x1, y1, x2, y2, outline="grey")       

    # mouse click event handler
    def canvas_on_click(self, event):
        # capture mouse X coordinate and get the column that coresponds to this X
        column_clicked = self.get_column_selected(event.x)

        # check if column is full by checking if the top piece is free
        if self.board[0][column_clicked] != ' ':
            return      
          
        # get the first available row to place a piece on the selected column
        row_available = self.get_row_available(column_clicked)      
        # place a piece to the selected column and row
        self.place_piece(row_available, column_clicked, self.player_current)
        self.handle_turn()
        
    # handle the outcome of each turn
    def handle_turn(self):
        # check if there is a winner
        winner = self.get_winner()
        # if there is a winner show it's name on a messagebox create new game
        if winner is not None:
            messagebox.showinfo("Game Over", f"{winner.name} wins!")
            self.new_game(self.Player("Red Player", "red", "human"), self.Player("Yellow Player", "yellow", "human"))       
        # if there is a no winner and the board is full it is a tie
        elif all(self.board[i][j] != ' ' for i in range(self.row_count) for j in range(self.column_count)):
            messagebox.showinfo("Game Over", "It's a tie!")
            self.new_game(self.Player("Red Player", "red", "human"), self.Player("Yellow Player", "yellow", "human"))       
        # if there is a no winner and the board is not full we continue to play
        else:
            # switch player's turn
            if self.player_current == self.player1:
                self.player_current = self.player2
            else:
                self.player_current = self.player1
            # update current player's label
            self.player_current_label.config(text = f"Current Player: {self.player_current.name}")

    # place a player's piece to [row, column] position
    def place_piece(self, row, column, player):      
        # generate a circle using the current player's color
        x1 = column * self.column_width + self.left_top_offset
        y1 = row * self.column_width + self.left_top_offset
        x2 = x1 + self.piece_diameter
        y2 = y1 + self.piece_diameter
        color = self.player_current.color
        self.canvas.create_oval(x1, y1, x2, y2, fill = color, tags = 'disk')
        # by placing a piece we insert a player object in the board's nested list
        self.board[row][column] = player

    # get column from user's click position
    def get_column_selected(self, x):
        # calculate selected column by dividing the X coordinate with the column's width
        column = (x - self.left_top_offset + int(self.piece_spacing/2)) // self.column_width
        # check if the selection is outside of the board
        if column > (self.column_count - 1):
            column = self.column_count -1
        if column < 0:
            column = 0
        return column
    
    # get available row for the piece 
    def get_row_available(self, column):
        # from index 5 (wich corresponds to the bottom row) until index 0, 
        # check to see if there is an empty row and return it's index
        for i in range(self.row_count - 1, -1, -1):
            if self.board[i][column] == ' ':
                return i
       
    # check for winner and return it     
    def get_winner(self):
        # check rows for winner
        for i in range(6):
            for j in range(4):
                if self.board[i][j] == self.board[i][j + 1] == self.board[i][j + 2] == self.board[i][j + 3] != ' ':
                    return self.board[i][j]
                
        # check columns for winner
        for i in range(3):
            for j in range(7):
                if self.board[i][j] == self.board[i + 1][j] == self.board[i + 2][j] == self.board[i + 3][j] != ' ':
                    return self.board[i][j]
                
        # check diagonals (top-left to bottom-right) for winner
        for i in range(3):
            for j in range(4):
                if self.board[i][j] == self.board[i + 1][j + 1] == self.board[i+2][j+2] == self.board[i + 3][j + 3] != ' ':
                    return self.board[i][j]
        
        # check diagonals (top-right to bottom-left) for winner
        for i in range(3):
            for j in range(3, 7):
                if self.board[i][j] == self.board[i + 1][j - 1] == self.board[i + 2][j - 2] == self.board[i + 3][j - 3] != ' ':
                    return self.board[i][j]
                
        return None

Connect4()
